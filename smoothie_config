
# Updated to accomodate 28STH32 NEMA-11 motor from Phidgets, and the alternate
# Z slides built around them, for the 3 Z-axes.

# NOTE Lines must not exceed 132 characters
## Robot module configurations : general handling of movement G-codes and slicing into moves
default_feed_rate                            4000 # Default rate ( mm/minute ) for G1/G2/G3 moves
default_seek_rate                            4000 # Default rate ( mm/minute ) for G0 moves
mm_per_arc_segment                           0.0              # Fixed length for line segments that divide arcs 0 to disable
mm_max_arc_error                             0.01             # The maximum error for line segments that divide arcs 0 to disable
                                                              # note it is invalid for both the above be 0
                                                              # if both are used, will use largest segment length based on radius
#mm_per_line_segment                          5                # Lines can be cut into segments ( not usefull with cartesian
                                                              # coordinates robots ).

# Arm solution configuration : Cartesian robot. Translates mm positions into stepper positions
arm_solution                                 corexy
# TODO did Dave end up using 1/16 or 1/32 microstepping (v1.1 should be 1/32,
# but he asked a question that suggested he might have modified the board for
# 1/16...)?
# TODO are <axis>_steps_per_mm redundant w/ <axis>_max_rate in most recent ver?
# one replace the other? contradict each other?
# steps_per_mm = full_steps_per_rotation x microsteps_per_step / mm_per_rotation
# ...where microsteps_per_step is (generally?) 32 on v1.1 Smoothieboards.
# 28STH32 NEMA-11 step_angle = 1.8 => full_steps_per_rotation = 200
# The nut on my T8 leadscrews seem to go 8mm per turn.

# To get mm_per_rotation for CoreXY:
# dX = (dA + dB)/2,  dY = (dA - dB)/2
# dA = dX + dY,  dB = dX - dY
# ...where dA and dB refer to distances each motor moves its belt.
# (from https://corexy.com/theory.html)
# The motor pulleys have 20 teeth with the GT2 profile, which is 2mm pitch, so
# one revolution moves 40mm of belt. The Robotdigg MNEMA17-60 motors also have a
# 1.8 degree step angle.
# TODO check w/ Dave, but it seems that since these were at 80, he is using 1/16
# microstepping...
alpha_steps_per_mm                           160
beta_steps_per_mm                            160
gamma_steps_per_mm                           800
delta_steps_per_mm                           800
epsilon_steps_per_mm                         800

# Planner module configuration : Look-ahead and acceleration configuration
planner_queue_size                           32               # DO NOT CHANGE THIS UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING
acceleration                                 200             # Acceleration in mm/second/second.
#z_acceleration                              500              # Acceleration for Z only moves in mm/s^2, 0 uses acceleration which is the default. DO NOT SET ON A DELTA
junction_deviation                           0.05             # Similar to the old "max_jerk", in millimeters,
                                                              # see https://github.com/grbl/grbl/blob/master/planner.c
                                                              # and https://github.com/grbl/grbl/wiki/Configuring-Grbl-v0.8
                                                              # Lower values mean being more careful, higher values means being
                                                              # faster and have more jerk
#z_junction_deviation                        0.0              # for Z only moves, -1 uses junction_deviation, zero disables junction_deviation on z moves DO NOT SET ON A DELTA
#minimum_planner_speed                       0.0              # sets the minimum planner speed in mm/sec

# Stepper module configuration
microseconds_per_step_pulse                  1                # Duration of step pulses to stepper drivers, in microseconds
base_stepping_frequency                      100000           # Base frequency for stepping

# Cartesian axis speed limits
x_axis_max_speed                             16000            # mm/min
y_axis_max_speed                             16000            # mm/min
# TODO factor in maximum motor speed of 426 RPM for 28STH32 NEMA-11 motor from
# phidgets
z_axis_max_speed                             5000              # mm/min

# Stepper module pins ( ports, and pin numbers, appending "!" to the number will invert a pin )
alpha_step_pin                               2.0              # Pin for alpha stepper step signal
alpha_dir_pin                                0.5!              # Pin for alpha stepper direction
alpha_en_pin                                 0.4              # Pin for alpha enable pin
# TODO some reason these were at 1, not 1.5?
alpha_current                                1.0              # X stepper motor current
# MNEMA17-60 doesn't seem to list a maximum rotation rate.
# Assuming a maximum rotation rate of about 3000 rpm (conservative wrt ~4500 on
# Phidget motor that seems to be better suited to higher speeds):
# And with these pulleys, one rotation is again 40mm, so 120,000 mm/min at
# assumed max rpm.
alpha_max_rate                               60000.0          # mm/min

beta_step_pin                                2.1              # Pin for beta stepper step signal
beta_dir_pin                                 0.11             # Pin for beta stepper direction
beta_en_pin                                  0.10             # Pin for beta enable
beta_current                                 1.0              # Y stepper motor current
beta_max_rate                                60000.0          # mm/min

gamma_step_pin                               2.2              # Pin for gamma stepper step signal
gamma_dir_pin                                0.20             # Pin for gamma stepper direction
gamma_en_pin                                 0.19             # Pin for gamma enable
gamma_current                                0.67              # Z stepper motor current

# At 3000.0 mm/min, there was a visible position error (leadscrew / coupler slip maybe)
# As low as 2000.0 mm/min, my cheap DIY slides started making noises.
# 1600 too... (maybe higher speed just damaged it, and now it will always make noise?)
# Trying old 1000 (that worked w/o noise previously) again...
# And that worked fine.
gamma_max_rate                               1200.0            # mm/min

# TODO how is this assigned to the "A" axis? is it?
# A axis
delta_step_pin                               2.3              # Pin for delta stepper step signal
delta_dir_pin                                0.22             # Pin for delta stepper direction
delta_en_pin                                 0.21             # Pin for delta enable
delta_current                                0.67              # Z stepper motor current
delta_max_rate                               1200.0            # mm/min

# B axis
epsilon_step_pin                               2.8              # Pin for delta stepper step signal
epsilon_dir_pin                                2.13             # Pin for delta stepper direction
epsilon_en_pin                                 4.29             # Pin for delta enable
epsilon_current                                0.67              # Z stepper motor current
epsilon_max_rate                               1200.0            # mm/min

## System configuration
# Serial communications configuration ( baud rate defaults to 9600 if undefined )
uart0.baud_rate                              115200           # Baud rate for the default hardware serial port
second_usb_serial_enable                     false            # This enables a second usb serial port (to have both pronterface
                                                              # and a terminal connected)
#leds_disable                                true             # disable using leds after config loaded
#play_led_disable                            true             # disable the play led

# Kill button (used to be called pause) maybe assigned to a different pin, set to the onboard pin by default
kill_button_enable                           true             # set to true to enable a kill button
kill_button_pin                              2.12             # kill button pin. default is same as pause button 2.12 (2.11 is another good choice)

#msd_disable                                 false            # disable the MSD (USB SDCARD) when set to true (needs special binary)
#dfu_enable                                  false            # for linux developers, set to true to enable DFU
#watchdog_timeout                            10               # watchdog timeout in seconds, default is 10, set to 0 to disable the watchdog

# Only needed on a smoothieboard
currentcontrol_module_enable                 true


## Endstops new syntax (the name is not significant)
# NOTE only a min or a max homing endstop maybe defined
endstop.minx.enable                          true             # enable an endstop
endstop.minx.pin                             1.24^            # pin
endstop.minx.homing_direction                home_to_min      # direction it moves to the endstop
endstop.minx.homing_position                 -2               # the cartesian coordinate this is set to when it homes
endstop.minx.axis                            X                # the axis designator
# TODO is "times out" accurate? way to set this from soft_endstop limits?
endstop.minx.max_travel                      1200             # the maximum travel in mm before it times out
endstop.minx.fast_rate                       50               # fast homing rate in mm/sec
endstop.minx.slow_rate                       15               # slow homing rate in mm/sec
endstop.minx.retract                         2                # bounce off endstop in mm

endstop.miny.enable                          true             # enable an endstop
endstop.miny.pin                             1.26^            # pin
endstop.miny.homing_direction                home_to_min      # direction it moves to the endstop
endstop.miny.homing_position                 -2               # the cartesian coordinate this is set to when it homes
endstop.miny.axis                            Y                # the axis designator
endstop.miny.max_travel                      275              # the maximum travel in mm before it times out
endstop.miny.fast_rate                       50               # fast homing rate in mm/sec
endstop.miny.slow_rate                       15               # slow homing rate in mm/sec
endstop.miny.retract                         2                # bounce off endstop in mm

endstop.minz.enable                          true             # enable an endstop
endstop.minz.pin                             1.28^            # pin
endstop.minz.homing_direction                home_to_min      # direction it moves to the endstop
endstop.minz.homing_position                 -1               # the cartesian coordinate this is set to when it homes
endstop.minz.axis                            Z                # the axis designator
# TODO 65 is an estimate. improve.
endstop.minz.max_travel                      65              # the maximum travel in mm before it times out
endstop.minz.fast_rate                       20               # fast homing rate in mm/sec
endstop.minz.slow_rate                       5                # slow homing rate in mm/sec
endstop.minz.retract                         1                # bounce off endstop in mm

endstop.mina.enable                          true             # enable an endstop
endstop.mina.pin                             1.25^            # pin
endstop.mina.homing_direction                home_to_min      # direction it moves to the endstop
endstop.mina.homing_position                 -1               # the cartesian coordinate this is set to when it homes
endstop.mina.axis                            A                # the axis designator
endstop.mina.max_travel                      65              # the maximum travel in mm before it times out
endstop.mina.fast_rate                       20               # fast homing rate in mm/sec
endstop.mina.slow_rate                       5                # slow homing rate in mm/sec
endstop.mina.retract                         1                # bounce off endstop in mm

endstop.minb.enable                          true             # enable an endstop
endstop.minb.pin                             1.27^            # pin
endstop.minb.homing_direction                home_to_min      # direction it moves to the endstop
endstop.minb.homing_position                 -1               # the cartesian coordinate this is set to when it homes
endstop.minb.axis                            B                # the axis designator
endstop.minb.max_travel                      65              # the maximum travel in mm before it times out
endstop.minb.fast_rate                       20               # fast homing rate in mm/sec
endstop.minb.slow_rate                       5                # slow homing rate in mm/sec
endstop.minb.retract                         1                # bounce off endstop in mm

endstop.maxb.enable                          true             # enable an endstop
endstop.maxb.pin                             1.29^            # pin
endstop.maxb.axis                            B                # the axis designator

# optional enable limit switches, actions will stop if any enabled limit switch is triggered
endstop.minx.limit_enable                   true            # set to true to enable the limit on this endstop
endstop.miny.limit_enable                   true            # set to true to enable the limit on this endstop
endstop.minz.limit_enable                   true            # set to true to enable the limit on this endstop
endstop.mina.limit_enable                   true            #
endstop.minb.limit_enable                   true            #
# TODO is this the config i want? it's not functioning as a z-probe or
# something? will the program just stop if it's triggered?
endstop.maxb.limit_enable                   true            #

# type of machine
corexy_homing                               true            # set to true if homing on a hbot or corexy

# optional order in which axis will home, default is they all home at the same time,
# if this is set it will force each axis to home one at a time in the specified order
# TODO it would seem to make more sense to implement effectors as something akin
# to extruder module (maybe something even more analagous?), rather than with
# the extra axes (is the 6axis module what provides the functionality Dave
# contracted for?)
homing_order                                BAZYX              # x axis followed by y then z last
move_to_origin_after_home                   false              # move XY to 0,0 after homing
#endstop_debounce_count                       100              # uncomment if you get noise on your endstops, default is 100
#endstop_debounce_ms                          1                # uncomment if you get noise on your endstops, default is 1 millisecond debounce
#home_z_first                                 true             # uncomment and set to true to home the Z first, otherwise Z homes after XY


# Part manipulator - Vacuum
switch.gpio0.enable                   true
switch.gpio0.input_off_command        M41
switch.gpio0.input_on_command         M40
switch.gpio0.output_pin               1.23
switch.gpio0.output_type              digital
switch.gpio0.failsafe_set_to          0

# Part manipulator - Air
switch.gpio1.enable                   true
switch.gpio1.input_off_command        M43
switch.gpio1.input_on_command         M42
switch.gpio1.output_pin               2.4
switch.gpio1.output_type              digital
switch.gpio1.failsafe_set_to          0

# Used to be: Fly manipulator - Vacuum
# Now: vial grabbing servo
switch.servo.enable                   true
# M280 S7.5 would be midway
switch.servo.input_on_command         M280
# Same as M280 S0 0% duty cycle, effectively off
switch.servo.input_off_command        M281
# May be any spare pin
switch.servo.output_pin               2.7 #3.25
# Software pwm output settable with S parameter in the input_on_command
switch.servo.output_type              hwpwm #swpwm
# set period to 20ms (50Hz) default is 50Hz
#switch.servo.pwm_period_ms            20
# false uses startup_value on boot true uses default_on_value
#switch.servo.startup_state            false
# TODO change to position open and ready to lower over a vial
# On boot and HALT it will set this PWM value
#switch.servo.startup_value            7.5
# This PWM value will be set if M280 doe snot have an S parameter, it is also the value used if startup_state is true
#switch.servo.default_on_value         3.3

# Fly manipulator - Air
switch.gpio3.enable                   true
switch.gpio3.input_off_command        M47
switch.gpio3.input_on_command         M46
switch.gpio3.output_pin               2.5
switch.gpio3.output_type              digital
switch.gpio3.failsafe_set_to          0

# LED illuminator
switch.gpio4.enable                   true
switch.gpio4.input_off_command        M49
switch.gpio4.input_on_command         M48
switch.gpio4.output_pin               2.6
switch.gpio4.output_type              digital
switch.gpio4.failsafe_set_to          0

# High flow vacuum valve
# 24V. Driven through an inverting isolator to another MOSFET, which can operate
# with a separate (24V) power supply.
switch.gpio5.enable                   true
switch.gpio5.input_off_command        M50
switch.gpio5.input_on_command         M51
switch.gpio5.output_pin               1.22
switch.gpio5.output_type              digital
# TODO both of these options supported in this build of smoothie?
switch.gpio5.startup_state            true
# TODO maybe the docs are wrong and this is also supposed to be true/false?
switch.gpio5.failsafe_set_to          1

